CREATE FUNCTION INTERVAL_SECONDS(i INTERVAL) RETURNS DOUBLE PRECISION
AS
$$
SELECT EXTRACT(EPOCH FROM i);
$$
LANGUAGE SQL IMMUTABLE STRICT;

CREATE FUNCTION PRICE_AVERAGE(s TEXT, t1 TIMESTAMP, t2 TIMESTAMP) RETURNS NUMERIC AS
$$
SELECT SUM("PRICE" * "QUANTITY")/SUM("QUANTITY")
FROM "TRADE_HISTORY" WHERE "SYMBOL"=s AND "TIME" BETWEEN t1 AND t2;
$$
LANGUAGE SQL IMMUTABLE STRICT;

CREATE FUNCTION PRICE_EMA(s TEXT, t TIMESTAMP, w INTERVAL) RETURNS DOUBLE PRECISION AS
$$
SELECT SUM("PRICE" * "QUANTITY" / EXP(INTERVAL_SECONDS(t - "TIME")/INTERVAL_SECONDS(w))) /
       SUM("QUANTITY" / EXP(INTERVAL_SECONDS(t - "TIME")/INTERVAL_SECONDS(w)))
FROM "TRADE_HISTORY" WHERE "SYMBOL"=s AND "TIME" BETWEEN t - (w*5) AND t;
$$
LANGUAGE SQL IMMUTABLE STRICT;

CREATE OR REPLACE FUNCTION TREND_FACTOR(symbol TEXT, t1 TIMESTAMP, t2 TIMESTAMP, timeFrame INTERVAL) RETURNS DOUBLE PRECISION AS $$
DECLARE
  startPrice DOUBLE PRECISION;
  endPrice DOUBLE PRECISION;
  changeRate DOUBLE PRECISION;
  result DOUBLE PRECISION;
BEGIN
  startPrice := PRICE_EMA(symbol, t1, timeFrame);
  endPrice := PRICE_EMA(symbol, t2, timeFrame);
  changeRate := (endPrice - startPrice)/INTERVAL_SECONDS(t2 - t1);
  SELECT
    SUM(
        "QUANTITY" * ("PRICE" - (startPrice + changeRate*INTERVAL_SECONDS("TIME"-t1)))^2
    ) / (SUM("QUANTITY") * (endPrice - startPrice)^2) INTO result
  FROM "TRADE_HISTORY" WHERE "SYMBOL"=symbol AND "TIME" BETWEEN t1 AND t2;
  RETURN SQRT(result);
END;
$$ LANGUAGE plpgsql;
